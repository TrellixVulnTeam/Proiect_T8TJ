{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class PlantService {\n  constructor(httpClient, datePipe) {\n    this.httpClient = httpClient;\n    this.datePipe = datePipe;\n\n    if (localStorage.getItem(\"currentUser\") != null) {\n      this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n    }\n\n    this._energies = new Array();\n    this._plants = new Array();\n    this.getPlants().forEach(next => {\n      this._plants = next;\n\n      this._plants.forEach(p => {\n        this._energies.push(new Energy());\n\n        console.log(p);\n      });\n\n      for (let i = 0; i < this._energies.length; i++) {\n        this.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01', '2022-12-31').forEach(ps => {\n          this._energies[i].status = ps;\n          this._energies[i].plant = this._plants[i];\n          ps.forEach(s => {\n            this._energies[i].thisYearEnergy[this.datePipe.transform(s.dateTime, 'MM') - 1] += s.current * s.voltage * s.powerFactor;\n            this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor;\n\n            if (this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n              this._energies[i].todayHours.push(this.datePipe.transform(s.dateTime, 'HH:mm:ss'));\n\n              this._energies[i].todayCurrent.push(s.current);\n\n              this._energies[i].todayVoltage.push(s.voltage);\n\n              this._energies[i].todayPowerFactor.push(s.powerFactor);\n\n              this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor);\n\n              this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor;\n            }\n          });\n        });\n      }\n\n      console.log(this._energies);\n    });\n  } // getPlant(id) {\n  //   const headers = new HttpHeaders(this._currentUser ? {\n  //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n  //   } : {});\n  //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n  // }\n\n\n  getPlants() {\n    return this.httpClient.get(environment.apiPlantUrl, {});\n  }\n\n  getSelectedPlant() {\n    return this._selectedPlant;\n  }\n\n  setSelectedPlant(plant) {\n    localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n    this._selectedPlant = plant;\n  }\n\n  getEnergies() {\n    return this._energies;\n  }\n\n  fetchPlantDatasBetweenDates(plant, date1, date2) {\n    const headers = new HttpHeaders(this._currentUser ? {\n      Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    } : {});\n    const parameters = {\n      \"date1\": date1,\n      \"date2\": date2\n    };\n    let queryParams = new HttpParams({\n      fromObject: parameters\n    });\n    return this.httpClient.get(plant.link + '/between', {\n      headers: headers,\n      params: queryParams\n    });\n  }\n\n  fetchPlantDatasToday(plant) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this._currentUser.username + ':' + _this._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en') // \"date\": '2022-04-18'\n\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return _this.httpClient.get(plant.link + '/from', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  updatePlantByName(name, plant) {\n    const headers = new HttpHeaders(this._currentUser ? {\n      Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    } : {});\n    return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n  }\n\n}\n\nPlantService.ɵfac = function PlantService_Factory(t) {\n  return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe));\n};\n\nPlantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlantService,\n  factory: PlantService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/plant.service.ts"],"names":["HttpHeaders","HttpParams","environment","formatDate","Energy","i0","i1","i2","PlantService","constructor","httpClient","datePipe","localStorage","getItem","_currentUser","JSON","parse","atob","_energies","Array","_plants","getPlants","forEach","next","p","push","console","log","i","length","fetchPlantDatasBetweenDates","ps","status","plant","s","thisYearEnergy","transform","dateTime","current","voltage","powerFactor","thisYearTotalEnergy","Date","todayHours","todayCurrent","todayVoltage","todayPowerFactor","todayPower","todayEnergy","get","apiPlantUrl","getSelectedPlant","_selectedPlant","setSelectedPlant","setItem","stringify","getEnergies","date1","date2","headers","Authorization","btoa","username","password","parameters","queryParams","fromObject","link","params","fetchPlantDatasToday","updatePlantByName","name","put","ɵfac","PlantService_Factory","t","ɵɵinject","HttpClient","DatePipe","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class PlantService {\n    constructor(httpClient, datePipe) {\n        this.httpClient = httpClient;\n        this.datePipe = datePipe;\n        if (localStorage.getItem(\"currentUser\") != null) {\n            this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n        }\n        this._energies = new Array();\n        this._plants = new Array();\n        this.getPlants().forEach(next => {\n            this._plants = next;\n            this._plants.forEach(p => {\n                this._energies.push(new Energy());\n                console.log(p);\n            });\n            for (let i = 0; i < this._energies.length; i++) {\n                this.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01', '2022-12-31').forEach(ps => {\n                    this._energies[i].status = ps;\n                    this._energies[i].plant = this._plants[i];\n                    ps.forEach(s => {\n                        this._energies[i].thisYearEnergy[this.datePipe.transform(s.dateTime, 'MM') - 1] += s.current * s.voltage * s.powerFactor;\n                        this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor;\n                        if (this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                            this._energies[i].todayHours.push(this.datePipe.transform(s.dateTime, 'HH:mm:ss'));\n                            this._energies[i].todayCurrent.push(s.current);\n                            this._energies[i].todayVoltage.push(s.voltage);\n                            this._energies[i].todayPowerFactor.push(s.powerFactor);\n                            this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor);\n                            this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor;\n                        }\n                    });\n                });\n            }\n            console.log(this._energies);\n        });\n    }\n    // getPlant(id) {\n    //   const headers = new HttpHeaders(this._currentUser ? {\n    //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    //   } : {});\n    //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n    // }\n    getPlants() {\n        return this.httpClient.get(environment.apiPlantUrl, {});\n    }\n    getSelectedPlant() {\n        return this._selectedPlant;\n    }\n    setSelectedPlant(plant) {\n        localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n        this._selectedPlant = plant;\n    }\n    getEnergies() {\n        return this._energies;\n    }\n    fetchPlantDatasBetweenDates(plant, date1, date2) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date1\": date1,\n            \"date2\": date2\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/between', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    async fetchPlantDatasToday(plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en')\n            // \"date\": '2022-04-18'\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/from', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    updatePlantByName(name, plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n    }\n}\nPlantService.ɵfac = function PlantService_Factory(t) { return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe)); };\nPlantService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PlantService, factory: PlantService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}