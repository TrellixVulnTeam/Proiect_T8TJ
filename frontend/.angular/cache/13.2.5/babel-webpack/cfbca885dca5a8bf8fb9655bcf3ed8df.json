{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class PlantService {\n  constructor(httpClient, datePipe) {\n    this.httpClient = httpClient;\n    this.datePipe = datePipe;\n\n    if (localStorage.getItem(\"currentUser\") != null) {\n      this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n    }\n\n    this._energies = new Array();\n    this._plants = new Array();\n    this.initialize();\n  }\n\n  initialize() {\n    var _this = this;\n\n    this.getPlants().forEach( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (next) {\n        _this._plants = next;\n\n        _this._plants.forEach(p => {\n          _this._energies.push(new Energy());\n\n          console.log(p);\n        });\n\n        for (let i = 0; i < _this._energies.length; i++) {\n          (yield _this.fetchPlantDatasBetweenDates(_this._plants[i], '2022-01-01', '2022-12-31')).forEach(ps => {\n            _this._energies[i].status = ps;\n            _this._energies[i].plant = _this._plants[i];\n            ps.forEach(s => {\n              _this._energies[i].thisYearEnergy[_this.datePipe.transform(s.dateTime, 'MM') - 1] += s.current * s.voltage * s.powerFactor;\n              _this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor;\n\n              if (_this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == _this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                _this._energies[i].todayHours.push(_this.datePipe.transform(s.dateTime, 'HH:mm:ss'));\n\n                _this._energies[i].todayCurrent.push(s.current);\n\n                _this._energies[i].todayVoltage.push(s.voltage);\n\n                _this._energies[i].todayPowerFactor.push(s.powerFactor);\n\n                _this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor);\n\n                _this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor;\n              }\n            });\n          });\n        } //  console.log(this._energies)\n\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  } // getPlant(id) {\n  //   const headers = new HttpHeaders(this._currentUser ? {\n  //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n  //   } : {});\n  //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n  // }\n\n\n  getPlants() {\n    return this.httpClient.get(environment.apiPlantUrl, {});\n  }\n\n  getSelectedPlant() {\n    return this._selectedPlant;\n  }\n\n  setSelectedPlant(plant) {\n    localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n    this._selectedPlant = plant;\n  }\n\n  getEnergies() {\n    return this._energies;\n  }\n\n  fetchPlantDatasBetweenDates(plant, date1, date2) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this2._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this2._currentUser.username + ':' + _this2._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date1\": date1,\n        \"date2\": date2\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return yield _this2.httpClient.get(plant.link + '/between', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  fetchPlantDatasToday(plant) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this3._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this3._currentUser.username + ':' + _this3._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en') // \"date\": '2022-04-18'\n\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return _this3.httpClient.get(plant.link + '/from', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  updatePlantByName(name, plant) {\n    const headers = new HttpHeaders(this._currentUser ? {\n      Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    } : {});\n    return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n  }\n\n}\n\nPlantService.ɵfac = function PlantService_Factory(t) {\n  return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe));\n};\n\nPlantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlantService,\n  factory: PlantService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/plant.service.ts"],"names":["HttpHeaders","HttpParams","environment","formatDate","Energy","i0","i1","i2","PlantService","constructor","httpClient","datePipe","localStorage","getItem","_currentUser","JSON","parse","atob","_energies","Array","_plants","initialize","getPlants","forEach","next","p","push","console","log","i","length","fetchPlantDatasBetweenDates","ps","status","plant","s","thisYearEnergy","transform","dateTime","current","voltage","powerFactor","thisYearTotalEnergy","Date","todayHours","todayCurrent","todayVoltage","todayPowerFactor","todayPower","todayEnergy","get","apiPlantUrl","getSelectedPlant","_selectedPlant","setSelectedPlant","setItem","stringify","getEnergies","date1","date2","headers","Authorization","btoa","username","password","parameters","queryParams","fromObject","link","params","fetchPlantDatasToday","updatePlantByName","name","put","ɵfac","PlantService_Factory","t","ɵɵinject","HttpClient","DatePipe","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class PlantService {\n    constructor(httpClient, datePipe) {\n        this.httpClient = httpClient;\n        this.datePipe = datePipe;\n        if (localStorage.getItem(\"currentUser\") != null) {\n            this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n        }\n        this._energies = new Array();\n        this._plants = new Array();\n        this.initialize();\n    }\n    initialize() {\n        this.getPlants().forEach(async (next) => {\n            this._plants = next;\n            this._plants.forEach(p => {\n                this._energies.push(new Energy());\n                console.log(p);\n            });\n            for (let i = 0; i < this._energies.length; i++) {\n                (await this.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01', '2022-12-31')).forEach(ps => {\n                    this._energies[i].status = ps;\n                    this._energies[i].plant = this._plants[i];\n                    ps.forEach(s => {\n                        this._energies[i].thisYearEnergy[this.datePipe.transform(s.dateTime, 'MM') - 1] += s.current * s.voltage * s.powerFactor;\n                        this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor;\n                        if (this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                            this._energies[i].todayHours.push(this.datePipe.transform(s.dateTime, 'HH:mm:ss'));\n                            this._energies[i].todayCurrent.push(s.current);\n                            this._energies[i].todayVoltage.push(s.voltage);\n                            this._energies[i].todayPowerFactor.push(s.powerFactor);\n                            this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor);\n                            this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor;\n                        }\n                    });\n                });\n            }\n            //  console.log(this._energies)\n        });\n    }\n    // getPlant(id) {\n    //   const headers = new HttpHeaders(this._currentUser ? {\n    //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    //   } : {});\n    //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n    // }\n    getPlants() {\n        return this.httpClient.get(environment.apiPlantUrl, {});\n    }\n    getSelectedPlant() {\n        return this._selectedPlant;\n    }\n    setSelectedPlant(plant) {\n        localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n        this._selectedPlant = plant;\n    }\n    getEnergies() {\n        return this._energies;\n    }\n    async fetchPlantDatasBetweenDates(plant, date1, date2) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date1\": date1,\n            \"date2\": date2\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return await this.httpClient.get(plant.link + '/between', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    async fetchPlantDatasToday(plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en')\n            // \"date\": '2022-04-18'\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/from', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    updatePlantByName(name, plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n    }\n}\nPlantService.ɵfac = function PlantService_Factory(t) { return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe)); };\nPlantService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PlantService, factory: PlantService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}