{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n\n    if (localStorage.getItem(\"currentUser\") != null) {\n      this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n    }\n  }\n\n  register(newUser) {\n    return this.http.post(environment.apiUserUrl + \"/register\", newUser);\n  }\n\n  login(credentials) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(credentials ? {\n        Authorization: 'Basic ' + btoa(credentials.username + ':' + credentials.password),\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      } : {});\n      return _this.http.post(environment.apiUserUrl + \"/authenticate\", {\n        username: credentials.username,\n        password: credentials.password,\n        email: null\n      }, {\n        headers: headers\n      }).pipe(map(user => {\n        localStorage.setItem(\"currentUser\", btoa(JSON.stringify(user)));\n        return user;\n      }));\n    })();\n  }\n\n  logout() {\n    return this.http.post(environment.apiUserUrl + \"/logout/succes\", null);\n  }\n\n  isAuthenticated() {\n    return this._currentUser != null ? true : false;\n  }\n\n  setCurrentUser(currentUser) {\n    this._currentUser = currentUser;\n  }\n\n  getCurrentUser() {\n    return this._currentUser;\n  }\n\n}\n\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/authentication.service.ts"],"names":["HttpHeaders","map","environment","i0","i1","AuthenticationService","constructor","http","localStorage","getItem","_currentUser","JSON","parse","atob","register","newUser","post","apiUserUrl","login","credentials","headers","Authorization","btoa","username","password","email","pipe","user","setItem","stringify","logout","isAuthenticated","setCurrentUser","currentUser","getCurrentUser","ɵfac","AuthenticationService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,GAAT,QAAoB,MAApB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,qBAAN,CAA4B;AAC/BC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,aAArB,KAAuC,IAA3C,EAAiD;AAC7C,WAAKC,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACL,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAf,CAApB;AACH;AACJ;;AACDK,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,WAAO,KAAKR,IAAL,CAAUS,IAAV,CAAed,WAAW,CAACe,UAAZ,GAAyB,WAAxC,EAAqDF,OAArD,CAAP;AACH;;AACKG,EAAAA,KAAK,CAACC,WAAD,EAAc;AAAA;;AAAA;AACrB,YAAMC,OAAO,GAAG,IAAIpB,WAAJ,CAAgBmB,WAAW,GAAG;AAC1CE,QAAAA,aAAa,EAAE,WAAWC,IAAI,CAACH,WAAW,CAACI,QAAZ,GAAuB,GAAvB,GAA6BJ,WAAW,CAACK,QAA1C,CADY;AAE1C,4BAAoB;AAFsB,OAAH,GAGvC,EAHY,CAAhB;AAIA,aAAO,KAAI,CAACjB,IAAL,CAAUS,IAAV,CAAed,WAAW,CAACe,UAAZ,GAAyB,eAAxC,EAAyD;AAAEM,QAAAA,QAAQ,EAAEJ,WAAW,CAACI,QAAxB;AAAkCC,QAAAA,QAAQ,EAAEL,WAAW,CAACK,QAAxD;AAAkEC,QAAAA,KAAK,EAAE;AAAzE,OAAzD,EAA0I;AAAEL,QAAAA,OAAO,EAAEA;AAAX,OAA1I,EACFM,IADE,CACGzB,GAAG,CAAC0B,IAAI,IAAI;AAClBnB,QAAAA,YAAY,CAACoB,OAAb,CAAqB,aAArB,EAAoCN,IAAI,CAACX,IAAI,CAACkB,SAAL,CAAeF,IAAf,CAAD,CAAxC;AACA,eAAOA,IAAP;AACH,OAHY,CADN,CAAP;AALqB;AAUxB;;AACDG,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKvB,IAAL,CAAUS,IAAV,CAAed,WAAW,CAACe,UAAZ,GAAyB,gBAAxC,EAA0D,IAA1D,CAAP;AACH;;AACDc,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKrB,YAAL,IAAqB,IAArB,GAA4B,IAA5B,GAAmC,KAA1C;AACH;;AACDsB,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB,SAAKvB,YAAL,GAAoBuB,WAApB;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKxB,YAAZ;AACH;;AAhC8B;;AAkCnCL,qBAAqB,CAAC8B,IAAtB,GAA6B,SAASC,6BAAT,CAAuCC,CAAvC,EAA0C;AAAE,SAAO,KAAKA,CAAC,IAAIhC,qBAAV,EAAiCF,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,UAAf,CAAjC,CAAP;AAAsE,CAA/I;;AACAlC,qBAAqB,CAACmC,KAAtB,GAA8B,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,qBAAT;AAAgCsC,EAAAA,OAAO,EAAEtC,qBAAqB,CAAC8B,IAA/D;AAAqES,EAAAA,UAAU,EAAE;AAAjF,CAAtB,CAA5C","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthenticationService {\n    constructor(http) {\n        this.http = http;\n        if (localStorage.getItem(\"currentUser\") != null) {\n            this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n        }\n    }\n    register(newUser) {\n        return this.http.post(environment.apiUserUrl + \"/register\", newUser);\n    }\n    async login(credentials) {\n        const headers = new HttpHeaders(credentials ? {\n            Authorization: 'Basic ' + btoa(credentials.username + ':' + credentials.password),\n            \"X-Requested-With\": \"XMLHttpRequest\"\n        } : {});\n        return this.http.post(environment.apiUserUrl + \"/authenticate\", { username: credentials.username, password: credentials.password, email: null }, { headers: headers })\n            .pipe(map(user => {\n            localStorage.setItem(\"currentUser\", btoa(JSON.stringify(user)));\n            return user;\n        }));\n    }\n    logout() {\n        return this.http.post(environment.apiUserUrl + \"/logout/succes\", null);\n    }\n    isAuthenticated() {\n        return this._currentUser != null ? true : false;\n    }\n    setCurrentUser(currentUser) {\n        this._currentUser = currentUser;\n    }\n    getCurrentUser() {\n        return this._currentUser;\n    }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient)); };\nAuthenticationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthenticationService, factory: AuthenticationService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}