{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlantService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n\n    if (localStorage.getItem(\"currentUser\") != null) {\n      this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n    }\n  } // getPlant(id) {\n  //   const headers = new HttpHeaders(this._currentUser ? {\n  //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n  //   } : {});\n  //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n  // }\n\n\n  getPlants() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.httpClient.get(environment.apiPlantUrl, {});\n    })();\n  }\n\n  getSelectedPlant() {\n    return this._selectedPlant;\n  }\n\n  setSelectedPlant(plant) {\n    localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n    this._selectedPlant = plant;\n  }\n\n  getEnergies() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2._energies;\n    })();\n  }\n\n  fetchPlantDatasBetweenDates(plant, date1, date2) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this3._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this3._currentUser.username + ':' + _this3._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date1\": date1,\n        \"date2\": date2\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return _this3.httpClient.get(plant.link + '/between', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  fetchPlantDatasToday(plant) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this4._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this4._currentUser.username + ':' + _this4._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en') // \"date\": '2022-04-18'\n\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return _this4.httpClient.get(plant.link + '/from', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  updatePlantByName(name, plant) {\n    const headers = new HttpHeaders(this._currentUser ? {\n      Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    } : {});\n    return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n  }\n\n}\n\nPlantService.ɵfac = function PlantService_Factory(t) {\n  return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPlantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlantService,\n  factory: PlantService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/plant.service.ts"],"names":["HttpHeaders","HttpParams","environment","formatDate","i0","i1","PlantService","constructor","httpClient","localStorage","getItem","_currentUser","JSON","parse","atob","getPlants","get","apiPlantUrl","getSelectedPlant","_selectedPlant","setSelectedPlant","plant","setItem","stringify","getEnergies","_energies","fetchPlantDatasBetweenDates","date1","date2","headers","Authorization","btoa","username","password","parameters","queryParams","fromObject","link","params","fetchPlantDatasToday","Date","updatePlantByName","name","put","ɵfac","PlantService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlantService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        if (localStorage.getItem(\"currentUser\") != null) {\n            this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n        }\n    }\n    // getPlant(id) {\n    //   const headers = new HttpHeaders(this._currentUser ? {\n    //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    //   } : {});\n    //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n    // }\n    async getPlants() {\n        return this.httpClient.get(environment.apiPlantUrl, {});\n    }\n    getSelectedPlant() {\n        return this._selectedPlant;\n    }\n    setSelectedPlant(plant) {\n        localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n        this._selectedPlant = plant;\n    }\n    async getEnergies() {\n        return this._energies;\n    }\n    async fetchPlantDatasBetweenDates(plant, date1, date2) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date1\": date1,\n            \"date2\": date2\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/between', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    async fetchPlantDatasToday(plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en')\n            // \"date\": '2022-04-18'\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/from', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    updatePlantByName(name, plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n    }\n}\nPlantService.ɵfac = function PlantService_Factory(t) { return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient)); };\nPlantService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PlantService, factory: PlantService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}