{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nexport class EnergyService {\n  constructor(plantService) {\n    var _this = this;\n\n    this.plantService = plantService;\n    this._energies = new Array();\n    plantService.getPlants().subscribe(p => {\n      for (let i = 0; i < p.length; i++) {\n        this._energies.push(new Energy());\n\n        this._energies[i].plant = p[i];\n      }\n    }, error => console.log(error), () => {\n      console.log(this._energies.length);\n    });\n\n    this._energies.forEach( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (e) {\n        _this.plantService.fetchPlantDatasBetweenDates(e.plant, '2022-01-01', '2022-12-31').subscribe(ps => e.status = ps, error => console.log(error));\n\n        var ps = yield _this.plantService.fetchPlantDatasToday(e.plant).toPromise();\n        ps.data.forEach(p => p.forEach(v => {\n          e.todayCurrent.push(v.current);\n          e.todayVoltage.push(v.voltage);\n          e.todayPowerFactor.push(v.powerFactor);\n          e.todayHours.push(v.dateTime);\n        }));\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); //  ps => {\n    //   if (e.todayCurrent.length == 0) {\n    //     ps.forEach(\n    //       v => {\n    //         e.todayCurrent.push(v.current)\n    //         e.todayVoltage.push(v.voltage)\n    //         e.todayPowerFactor.push(v.powerFactor)\n    //         e.todayHours.push(v.dateTime)\n    //       }\n    //     )\n    //   }\n    // },\n    // error => console.log(error),\n    // () => { }\n\n  }\n\n  getEnergy() {\n    return this._energies;\n  }\n\n}\n\nEnergyService.ɵfac = function EnergyService_Factory(t) {\n  return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService));\n};\n\nEnergyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EnergyService,\n  factory: EnergyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/energy.service.ts"],"names":["Energy","i0","i1","EnergyService","constructor","plantService","_energies","Array","getPlants","subscribe","p","i","length","push","plant","error","console","log","forEach","e","fetchPlantDatasBetweenDates","ps","status","fetchPlantDatasToday","toPromise","data","v","todayCurrent","current","todayVoltage","voltage","todayPowerFactor","powerFactor","todayHours","dateTime","getEnergy","ɵfac","EnergyService_Factory","t","ɵɵinject","PlantService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AAAA;;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,SAAL,GAAiB,IAAIC,KAAJ,EAAjB;AACAF,IAAAA,YAAY,CAACG,SAAb,GAAyBC,SAAzB,CAAmCC,CAAC,IAAI;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAAC,CAACE,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,aAAKL,SAAL,CAAeO,IAAf,CAAoB,IAAIb,MAAJ,EAApB;;AACA,aAAKM,SAAL,CAAeK,CAAf,EAAkBG,KAAlB,GAA0BJ,CAAC,CAACC,CAAD,CAA3B;AACH;AACJ,KALD,EAKGI,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALZ,EAKgC,MAAM;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,SAAL,CAAeM,MAA3B;AACH,KAPD;;AAQA,SAAKN,SAAL,CAAeY,OAAf;AAAA,mCAAuB,WAAOC,CAAP,EAAa;AAChC,QAAA,KAAI,CAACd,YAAL,CAAkBe,2BAAlB,CAA8CD,CAAC,CAACL,KAAhD,EAAuD,YAAvD,EAAqE,YAArE,EAAmFL,SAAnF,CAA6FY,EAAE,IAAIF,CAAC,CAACG,MAAF,GAAWD,EAA9G,EAAkHN,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAA3H;;AACA,YAAIM,EAAE,SAAS,KAAI,CAAChB,YAAL,CAAkBkB,oBAAlB,CAAuCJ,CAAC,CAACL,KAAzC,EAAgDU,SAAhD,EAAf;AACAH,QAAAA,EAAE,CAACI,IAAH,CAAQP,OAAR,CAAgBR,CAAC,IAAIA,CAAC,CAACQ,OAAF,CAAUQ,CAAC,IAAI;AAChCP,UAAAA,CAAC,CAACQ,YAAF,CAAed,IAAf,CAAoBa,CAAC,CAACE,OAAtB;AACAT,UAAAA,CAAC,CAACU,YAAF,CAAehB,IAAf,CAAoBa,CAAC,CAACI,OAAtB;AACAX,UAAAA,CAAC,CAACY,gBAAF,CAAmBlB,IAAnB,CAAwBa,CAAC,CAACM,WAA1B;AACAb,UAAAA,CAAC,CAACc,UAAF,CAAapB,IAAb,CAAkBa,CAAC,CAACQ,QAApB;AACH,SALoB,CAArB;AAMH,OATD;;AAAA;AAAA;AAAA;AAAA,SAXsB,CAqBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AACDC,EAAAA,SAAS,GAAG;AACR,WAAO,KAAK7B,SAAZ;AACH;;AAvCsB;;AAyC3BH,aAAa,CAACiC,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAInC,aAAV,EAAyBF,EAAE,CAACsC,QAAH,CAAYrC,EAAE,CAACsC,YAAf,CAAzB,CAAP;AAAgE,CAAzH;;AACArC,aAAa,CAACsC,KAAd,GAAsB,aAAcxC,EAAE,CAACyC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAExC,aAAT;AAAwByC,EAAAA,OAAO,EAAEzC,aAAa,CAACiC,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nexport class EnergyService {\n    constructor(plantService) {\n        this.plantService = plantService;\n        this._energies = new Array();\n        plantService.getPlants().subscribe(p => {\n            for (let i = 0; i < p.length; i++) {\n                this._energies.push(new Energy());\n                this._energies[i].plant = p[i];\n            }\n        }, error => console.log(error), () => {\n            console.log(this._energies.length);\n        });\n        this._energies.forEach(async (e) => {\n            this.plantService.fetchPlantDatasBetweenDates(e.plant, '2022-01-01', '2022-12-31').subscribe(ps => e.status = ps, error => console.log(error));\n            var ps = await this.plantService.fetchPlantDatasToday(e.plant).toPromise();\n            ps.data.forEach(p => p.forEach(v => {\n                e.todayCurrent.push(v.current);\n                e.todayVoltage.push(v.voltage);\n                e.todayPowerFactor.push(v.powerFactor);\n                e.todayHours.push(v.dateTime);\n            }));\n        });\n        //  ps => {\n        //   if (e.todayCurrent.length == 0) {\n        //     ps.forEach(\n        //       v => {\n        //         e.todayCurrent.push(v.current)\n        //         e.todayVoltage.push(v.voltage)\n        //         e.todayPowerFactor.push(v.powerFactor)\n        //         e.todayHours.push(v.dateTime)\n        //       }\n        //     )\n        //   }\n        // },\n        // error => console.log(error),\n        // () => { }\n    }\n    getEnergy() {\n        return this._energies;\n    }\n}\nEnergyService.ɵfac = function EnergyService_Factory(t) { return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService)); };\nEnergyService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EnergyService, factory: EnergyService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}