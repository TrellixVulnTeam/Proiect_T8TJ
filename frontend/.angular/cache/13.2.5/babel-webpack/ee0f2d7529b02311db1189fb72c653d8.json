{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nexport class EnergyService {\n  constructor(plantService) {\n    this.plantService = plantService;\n    this._energies = new Array();\n    plantService.getPlants().subscribe(p => {\n      for (let i = 0; i < p.length; i++) {\n        this._energies.push(new Energy());\n\n        this._energies[i].plant = p[i];\n        this.plantService.fetchPlantDatasBetweenDates(p[i], '2022-01-01', '2022-12-31').subscribe(ps => {\n          this._energies[i].status = ps;\n          ps.forEach(p => {\n            let month = p.dateTime.toString().substring(5, 7);\n            this._energies[i].thisYearEnergy[month - 1] += p.current * p.voltage * p.powerFactor / 1000000; // Value in MWh\n          });\n          let currentMonth = new Date().toISOString().substring(5, 7);\n          let currentDay = new Date().toISOString().substring(8, 10); // let currentDay = new Date().toISOString().\n\n          for (let j = 0; j < 12; j++) {\n            if (j != currentMonth - 1) {\n              this._energies[i].thisYearEnergy[j] *= (this.getNoOfDaysOfMonth(j + 1) - 1) / this.getNoOfDaysOfMonth(j + 1);\n            } else {\n              this._energies[i].thisYearEnergy[j] *= (currentDay - 1) / currentDay;\n            }\n\n            this._energies[i].thisYearTotalEnergy += this._energies[i].thisYearEnergy[j];\n          }\n        }, error => console.log(error), () => {});\n        this.plantService.fetchPlantDatasToday(this._energies[i].plant).subscribe(p => {\n          // if (this._energies[i].todayCurrent.length == 0) {\n          p.forEach(v => {\n            // console.log( )\n            this._energies[i].todayCurrent.push(v.current);\n\n            this._energies[i].todayVoltage.push(v.voltage);\n\n            this._energies[i].todayPowerFactor.push(v.powerFactor * 100);\n\n            this._energies[i].todayHours.push(v.dateTime.toString().substring(11, 19));\n\n            this._energies[i].todayPower.push(v.voltage * v.current * v.powerFactor / 1000);\n\n            this._energies[i].todayEnergy += v.voltage * v.current * v.powerFactor / 1000;\n          });\n          this._energies[i].todayEnergy = this._energies[i].todayEnergy * (this._energies[i].todayHours.length - 1) / this._energies[i].todayHours.length; // }\n        }, error => console.log(error), () => {});\n      }\n    }, error => console.log(error), () => {});\n  }\n\n  getEnergies() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this._energies;\n    })();\n  }\n\n  getNoOfDaysOfMonth(month) {\n    switch (month) {\n      case 1:\n        return 31;\n\n      case 2:\n        return 28;\n\n      case 3:\n        return 31;\n\n      case 4:\n        return 30;\n\n      case 5:\n        return 31;\n\n      case 6:\n        return 30;\n\n      case 7:\n        return 31;\n\n      case 8:\n        return 31;\n\n      case 9:\n        return 30;\n\n      case 10:\n        return 31;\n\n      case 11:\n        return 30;\n\n      case 12:\n        return 31;\n\n      default:\n        throw new Error('invalid month');\n    }\n  }\n\n}\n\nEnergyService.ɵfac = function EnergyService_Factory(t) {\n  return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService));\n};\n\nEnergyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EnergyService,\n  factory: EnergyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/energy.service.ts"],"names":["Energy","i0","i1","EnergyService","constructor","plantService","_energies","Array","getPlants","subscribe","p","i","length","push","plant","fetchPlantDatasBetweenDates","ps","status","forEach","month","dateTime","toString","substring","thisYearEnergy","current","voltage","powerFactor","currentMonth","Date","toISOString","currentDay","j","getNoOfDaysOfMonth","thisYearTotalEnergy","error","console","log","fetchPlantDatasToday","v","todayCurrent","todayVoltage","todayPowerFactor","todayHours","todayPower","todayEnergy","getEnergies","Error","ɵfac","EnergyService_Factory","t","ɵɵinject","PlantService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nexport class EnergyService {\n    constructor(plantService) {\n        this.plantService = plantService;\n        this._energies = new Array();\n        plantService.getPlants().subscribe(p => {\n            for (let i = 0; i < p.length; i++) {\n                this._energies.push(new Energy());\n                this._energies[i].plant = p[i];\n                this.plantService.fetchPlantDatasBetweenDates(p[i], '2022-01-01', '2022-12-31')\n                    .subscribe(ps => {\n                    this._energies[i].status = ps;\n                    ps.forEach(p => {\n                        let month = p.dateTime.toString().substring(5, 7);\n                        this._energies[i].thisYearEnergy[month - 1] += p.current * p.voltage * p.powerFactor / 1000000; // Value in MWh\n                    });\n                    let currentMonth = new Date().toISOString().substring(5, 7);\n                    let currentDay = new Date().toISOString().substring(8, 10);\n                    // let currentDay = new Date().toISOString().\n                    for (let j = 0; j < 12; j++) {\n                        if (j != currentMonth - 1) {\n                            this._energies[i].thisYearEnergy[j] *= (this.getNoOfDaysOfMonth(j + 1) - 1) / this.getNoOfDaysOfMonth(j + 1);\n                        }\n                        else {\n                            this._energies[i].thisYearEnergy[j] *= (currentDay - 1) / currentDay;\n                        }\n                        this._energies[i].thisYearTotalEnergy += this._energies[i].thisYearEnergy[j];\n                    }\n                }, error => console.log(error), () => { });\n                this.plantService.fetchPlantDatasToday(this._energies[i].plant).subscribe(p => {\n                    // if (this._energies[i].todayCurrent.length == 0) {\n                    p.forEach(v => {\n                        // console.log( )\n                        this._energies[i].todayCurrent.push(v.current);\n                        this._energies[i].todayVoltage.push(v.voltage);\n                        this._energies[i].todayPowerFactor.push(v.powerFactor * 100);\n                        this._energies[i].todayHours.push(v.dateTime.toString().substring(11, 19));\n                        this._energies[i].todayPower.push(v.voltage * v.current * v.powerFactor / 1000);\n                        this._energies[i].todayEnergy += v.voltage * v.current * v.powerFactor / 1000;\n                    });\n                    this._energies[i].todayEnergy = this._energies[i].todayEnergy * (this._energies[i].todayHours.length - 1) / this._energies[i].todayHours.length;\n                    // }\n                }, error => console.log(error), () => { });\n            }\n        }, error => console.log(error), () => { });\n    }\n    async getEnergies() {\n        return this._energies;\n    }\n    getNoOfDaysOfMonth(month) {\n        switch (month) {\n            case 1: return 31;\n            case 2: return 28;\n            case 3: return 31;\n            case 4: return 30;\n            case 5: return 31;\n            case 6: return 30;\n            case 7: return 31;\n            case 8: return 31;\n            case 9: return 30;\n            case 10: return 31;\n            case 11: return 30;\n            case 12: return 31;\n            default: throw new Error('invalid month');\n        }\n    }\n}\nEnergyService.ɵfac = function EnergyService_Factory(t) { return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService)); };\nEnergyService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EnergyService, factory: EnergyService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}