{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nimport * as i2 from \"@angular/common\";\nexport class EnergyService {\n  constructor(plantService, datePipe) {\n    this.plantService = plantService;\n    this.datePipe = datePipe;\n    this._plants = new Array();\n  }\n\n  getEnergies() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var thisYear = _this.datePipe.transform(new Date(), 'yyyy');\n\n      _this._plants = yield _this.plantService.getPlants();\n      _this._energies = new Array();\n\n      for (let i = 0; i < _this._plants.length; i++) {\n        _this._energies.push(new Energy());\n\n        _this._energies[i].plant = _this._plants[i];\n        _this._energies[i].status = yield _this.plantService.fetchPlantDatasBetweenDates(_this._plants[i], thisYear + '-01-01', thisYear + '-12-31').catch(c => console.log(c));\n\n        _this._energies[i].status.forEach(ps => {\n          var month = _this.datePipe.transform(ps.dateTime, 'MM') - 1;\n          _this._energies[i].thisYearEnergy[month] += ps.current * ps.voltage * ps.powerFactor;\n          _this._energies[i].thisYearTotalEnergy += ps.current * ps.voltage * ps.powerFactor;\n\n          if (_this.datePipe.transform(ps.dateTime, 'yyyy-MM-dd') == _this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n            _this._energies[i].todayCurrent.push(ps.current);\n\n            _this._energies[i].todayVoltage.push(ps.voltage);\n\n            _this._energies[i].todayPowerFactor.push(ps.powerFactor);\n\n            _this._energies[i].todayPower.push(ps.current * ps.voltage * ps.powerFactor);\n\n            _this._energies[i].todayHours.push(_this.datePipe.transform(ps.dateTime, 'HH:mm:ss'));\n\n            _this._energies[i].todayEnergy += ps.current * ps.voltage * ps.powerFactor;\n          }\n        });\n\n        if (_this._energies[i].todayHours.length > 0) {\n          var actualHour = _this._energies[i].todayHours.length;\n          _this._energies[i].todayEnergy *= (actualHour - 1) / actualHour;\n        }\n\n        let currentMonthIndex = _this.datePipe.transform(new Date(), 'MM') - 1;\n\n        for (let j = 0; j < 12; j++) {\n          if (j != currentMonthIndex) {\n            _this._energies[i].thisYearEnergy[j] *= (_this.daysInMonth(j - 1, thisYear) - 1) / _this.daysInMonth(j - 1, thisYear);\n          } else {\n            let currentDayThisMonth = _this.datePipe.transform(new Date(), 'dd');\n\n            _this._energies[i].thisYearEnergy[j] *= (currentDayThisMonth - 1) / currentDayThisMonth;\n          }\n        }\n      } // console.log(this._energies)\n\n\n      return _this._energies;\n    })();\n  }\n\n  daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  }\n\n}\n\nEnergyService.ɵfac = function EnergyService_Factory(t) {\n  return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService), i0.ɵɵinject(i2.DatePipe));\n};\n\nEnergyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EnergyService,\n  factory: EnergyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/energy.service.ts"],"names":["Energy","i0","i1","i2","EnergyService","constructor","plantService","datePipe","_plants","Array","getEnergies","thisYear","transform","Date","getPlants","_energies","i","length","push","plant","status","fetchPlantDatasBetweenDates","catch","c","console","log","forEach","ps","month","dateTime","thisYearEnergy","current","voltage","powerFactor","thisYearTotalEnergy","todayCurrent","todayVoltage","todayPowerFactor","todayPower","todayHours","todayEnergy","actualHour","currentMonthIndex","j","daysInMonth","currentDayThisMonth","year","getDate","ɵfac","EnergyService_Factory","t","ɵɵinject","PlantService","DatePipe","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,YAAD,EAAeC,QAAf,EAAyB;AAChC,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAe,IAAIC,KAAJ,EAAf;AACH;;AACKC,EAAAA,WAAW,GAAG;AAAA;;AAAA;AAChB,UAAIC,QAAQ,GAAG,KAAI,CAACJ,QAAL,CAAcK,SAAd,CAAwB,IAAIC,IAAJ,EAAxB,EAAoC,MAApC,CAAf;;AACA,MAAA,KAAI,CAACL,OAAL,SAAqB,KAAI,CAACF,YAAL,CAAkBQ,SAAlB,EAArB;AACA,MAAA,KAAI,CAACC,SAAL,GAAiB,IAAIN,KAAJ,EAAjB;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAI,CAACR,OAAL,CAAaS,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,QAAA,KAAI,CAACD,SAAL,CAAeG,IAAf,CAAoB,IAAIlB,MAAJ,EAApB;;AACA,QAAA,KAAI,CAACe,SAAL,CAAeC,CAAf,EAAkBG,KAAlB,GAA0B,KAAI,CAACX,OAAL,CAAaQ,CAAb,CAA1B;AACA,QAAA,KAAI,CAACD,SAAL,CAAeC,CAAf,EAAkBI,MAAlB,SAAiC,KAAI,CAACd,YAAL,CAAkBe,2BAAlB,CAA8C,KAAI,CAACb,OAAL,CAAaQ,CAAb,CAA9C,EAA+DL,QAAQ,GAAG,QAA1E,EAAoFA,QAAQ,GAAG,QAA/F,EAC5BW,KAD4B,CACtBC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CADiB,CAAjC;;AAEA,QAAA,KAAI,CAACR,SAAL,CAAeC,CAAf,EAAkBI,MAAlB,CAAyBM,OAAzB,CAAiCC,EAAE,IAAI;AACnC,cAAIC,KAAK,GAAG,KAAI,CAACrB,QAAL,CAAcK,SAAd,CAAwBe,EAAE,CAACE,QAA3B,EAAqC,IAArC,IAA6C,CAAzD;AACA,UAAA,KAAI,CAACd,SAAL,CAAeC,CAAf,EAAkBc,cAAlB,CAAiCF,KAAjC,KAA2CD,EAAE,CAACI,OAAH,GAAaJ,EAAE,CAACK,OAAhB,GAA0BL,EAAE,CAACM,WAAxE;AACA,UAAA,KAAI,CAAClB,SAAL,CAAeC,CAAf,EAAkBkB,mBAAlB,IAAyCP,EAAE,CAACI,OAAH,GAAaJ,EAAE,CAACK,OAAhB,GAA0BL,EAAE,CAACM,WAAtE;;AACA,cAAI,KAAI,CAAC1B,QAAL,CAAcK,SAAd,CAAwBe,EAAE,CAACE,QAA3B,EAAqC,YAArC,KAAsD,KAAI,CAACtB,QAAL,CAAcK,SAAd,CAAwB,IAAIC,IAAJ,EAAxB,EAAoC,YAApC,CAA1D,EAA6G;AACzG,YAAA,KAAI,CAACE,SAAL,CAAeC,CAAf,EAAkBmB,YAAlB,CAA+BjB,IAA/B,CAAoCS,EAAE,CAACI,OAAvC;;AACA,YAAA,KAAI,CAAChB,SAAL,CAAeC,CAAf,EAAkBoB,YAAlB,CAA+BlB,IAA/B,CAAoCS,EAAE,CAACK,OAAvC;;AACA,YAAA,KAAI,CAACjB,SAAL,CAAeC,CAAf,EAAkBqB,gBAAlB,CAAmCnB,IAAnC,CAAwCS,EAAE,CAACM,WAA3C;;AACA,YAAA,KAAI,CAAClB,SAAL,CAAeC,CAAf,EAAkBsB,UAAlB,CAA6BpB,IAA7B,CAAkCS,EAAE,CAACI,OAAH,GAAaJ,EAAE,CAACK,OAAhB,GAA0BL,EAAE,CAACM,WAA/D;;AACA,YAAA,KAAI,CAAClB,SAAL,CAAeC,CAAf,EAAkBuB,UAAlB,CAA6BrB,IAA7B,CAAkC,KAAI,CAACX,QAAL,CAAcK,SAAd,CAAwBe,EAAE,CAACE,QAA3B,EAAqC,UAArC,CAAlC;;AACA,YAAA,KAAI,CAACd,SAAL,CAAeC,CAAf,EAAkBwB,WAAlB,IAAiCb,EAAE,CAACI,OAAH,GAAaJ,EAAE,CAACK,OAAhB,GAA0BL,EAAE,CAACM,WAA9D;AACH;AACJ,SAZD;;AAaA,YAAI,KAAI,CAAClB,SAAL,CAAeC,CAAf,EAAkBuB,UAAlB,CAA6BtB,MAA7B,GAAsC,CAA1C,EAA6C;AACzC,cAAIwB,UAAU,GAAG,KAAI,CAAC1B,SAAL,CAAeC,CAAf,EAAkBuB,UAAlB,CAA6BtB,MAA9C;AACA,UAAA,KAAI,CAACF,SAAL,CAAeC,CAAf,EAAkBwB,WAAlB,IAAiC,CAACC,UAAU,GAAG,CAAd,IAAmBA,UAApD;AACH;;AACD,YAAIC,iBAAiB,GAAG,KAAI,CAACnC,QAAL,CAAcK,SAAd,CAAwB,IAAIC,IAAJ,EAAxB,EAAoC,IAApC,IAA4C,CAApE;;AACA,aAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,cAAIA,CAAC,IAAID,iBAAT,EAA4B;AACxB,YAAA,KAAI,CAAC3B,SAAL,CAAeC,CAAf,EAAkBc,cAAlB,CAAiCa,CAAjC,KAAuC,CAAC,KAAI,CAACC,WAAL,CAAiBD,CAAC,GAAG,CAArB,EAAwBhC,QAAxB,IAAoC,CAArC,IAA0C,KAAI,CAACiC,WAAL,CAAiBD,CAAC,GAAG,CAArB,EAAwBhC,QAAxB,CAAjF;AACH,WAFD,MAGK;AACD,gBAAIkC,mBAAmB,GAAG,KAAI,CAACtC,QAAL,CAAcK,SAAd,CAAwB,IAAIC,IAAJ,EAAxB,EAAoC,IAApC,CAA1B;;AACA,YAAA,KAAI,CAACE,SAAL,CAAeC,CAAf,EAAkBc,cAAlB,CAAiCa,CAAjC,KAAuC,CAACE,mBAAmB,GAAG,CAAvB,IAA4BA,mBAAnE;AACH;AACJ;AACJ,OApCe,CAqChB;;;AACA,aAAO,KAAI,CAAC9B,SAAZ;AAtCgB;AAuCnB;;AACD6B,EAAAA,WAAW,CAAChB,KAAD,EAAQkB,IAAR,EAAc;AACrB,WAAO,IAAIjC,IAAJ,CAASiC,IAAT,EAAelB,KAAf,EAAsB,CAAtB,EAAyBmB,OAAzB,EAAP;AACH;;AAhDsB;;AAkD3B3C,aAAa,CAAC4C,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI9C,aAAV,EAAyBH,EAAE,CAACkD,QAAH,CAAYjD,EAAE,CAACkD,YAAf,CAAzB,EAAuDnD,EAAE,CAACkD,QAAH,CAAYhD,EAAE,CAACkD,QAAf,CAAvD,CAAP;AAA0F,CAAnJ;;AACAjD,aAAa,CAACkD,KAAd,GAAsB,aAAcrD,EAAE,CAACsD,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEpD,aAAT;AAAwBqD,EAAAA,OAAO,EAAErD,aAAa,CAAC4C,IAA/C;AAAqDU,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nimport * as i2 from \"@angular/common\";\nexport class EnergyService {\n    constructor(plantService, datePipe) {\n        this.plantService = plantService;\n        this.datePipe = datePipe;\n        this._plants = new Array();\n    }\n    async getEnergies() {\n        var thisYear = this.datePipe.transform(new Date(), 'yyyy');\n        this._plants = await this.plantService.getPlants();\n        this._energies = new Array();\n        for (let i = 0; i < this._plants.length; i++) {\n            this._energies.push(new Energy());\n            this._energies[i].plant = this._plants[i];\n            this._energies[i].status = await this.plantService.fetchPlantDatasBetweenDates(this._plants[i], thisYear + '-01-01', thisYear + '-12-31')\n                .catch(c => console.log(c));\n            this._energies[i].status.forEach(ps => {\n                var month = this.datePipe.transform(ps.dateTime, 'MM') - 1;\n                this._energies[i].thisYearEnergy[month] += ps.current * ps.voltage * ps.powerFactor;\n                this._energies[i].thisYearTotalEnergy += ps.current * ps.voltage * ps.powerFactor;\n                if (this.datePipe.transform(ps.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                    this._energies[i].todayCurrent.push(ps.current);\n                    this._energies[i].todayVoltage.push(ps.voltage);\n                    this._energies[i].todayPowerFactor.push(ps.powerFactor);\n                    this._energies[i].todayPower.push(ps.current * ps.voltage * ps.powerFactor);\n                    this._energies[i].todayHours.push(this.datePipe.transform(ps.dateTime, 'HH:mm:ss'));\n                    this._energies[i].todayEnergy += ps.current * ps.voltage * ps.powerFactor;\n                }\n            });\n            if (this._energies[i].todayHours.length > 0) {\n                var actualHour = this._energies[i].todayHours.length;\n                this._energies[i].todayEnergy *= (actualHour - 1) / actualHour;\n            }\n            let currentMonthIndex = this.datePipe.transform(new Date(), 'MM') - 1;\n            for (let j = 0; j < 12; j++) {\n                if (j != currentMonthIndex) {\n                    this._energies[i].thisYearEnergy[j] *= (this.daysInMonth(j - 1, thisYear) - 1) / this.daysInMonth(j - 1, thisYear);\n                }\n                else {\n                    let currentDayThisMonth = this.datePipe.transform(new Date(), 'dd');\n                    this._energies[i].thisYearEnergy[j] *= (currentDayThisMonth - 1) / currentDayThisMonth;\n                }\n            }\n        }\n        // console.log(this._energies)\n        return this._energies;\n    }\n    daysInMonth(month, year) {\n        return new Date(year, month, 0).getDate();\n    }\n}\nEnergyService.ɵfac = function EnergyService_Factory(t) { return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService), i0.ɵɵinject(i2.DatePipe)); };\nEnergyService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EnergyService, factory: EnergyService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}