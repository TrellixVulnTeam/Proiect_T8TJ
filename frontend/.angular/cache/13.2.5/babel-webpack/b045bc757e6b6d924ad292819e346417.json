{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlantService {\n  constructor(httpClient) {\n    var _this = this;\n\n    this.httpClient = httpClient;\n\n    if (localStorage.getItem(\"currentUser\") != null) {\n      this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n    }\n\n    this._energies = new Array();\n    this._plants = this.getPlants();\n\n    /*#__PURE__*/\n    (function () {\n      var _ref = _asyncToGenerator(function* (next) {\n        _this._plants = next;\n\n        _this._plants.forEach(p => {\n          _this._energies.push(new Energy()); // console.log(p)\n\n        });\n\n        for (let i = 0; i < _this._energies.length; i++) {\n          (yield _this.fetchPlantDatasBetweenDates(_this._plants[i], '2022-01-01', '2022-12-31')).forEach(ps => {\n            _this._energies[i].status = ps;\n            _this._energies[i].plant = _this._plants[i];\n            ps.forEach(s => {\n              _this._energies[i].thisYearEnergy[_this.datePipe.transform(s.dateTime, 'MM') - 1] += s.current * s.voltage * s.powerFactor;\n              _this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor;\n\n              if (_this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == _this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                _this._energies[i].todayHours.push(_this.datePipe.transform(s.dateTime, 'HH:mm:ss'));\n\n                _this._energies[i].todayCurrent.push(s.current);\n\n                _this._energies[i].todayVoltage.push(s.voltage);\n\n                _this._energies[i].todayPowerFactor.push(s.powerFactor);\n\n                _this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor);\n\n                _this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor;\n              }\n            });\n          });\n\n          _this._dailyEnergy.push(_this._energies[i].todayEnergy);\n\n          _this._yearlyEnergy.push(_this._energies[i].thisYearTotalEnergy);\n        }\n\n        console.log(_this._energies);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    })();\n  } // getPlant(id) {\n  //   const headers = new HttpHeaders(this._currentUser ? {\n  //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n  //   } : {});\n  //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n  // }\n\n\n  getPlants() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.httpClient.get(environment.apiPlantUrl, {});\n    })();\n  }\n\n  getSelectedPlant() {\n    return this._selectedPlant;\n  }\n\n  setSelectedPlant(plant) {\n    localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n    this._selectedPlant = plant;\n  }\n\n  getEnergies() {\n    return this._energies;\n  }\n\n  fetchPlantDatasBetweenDates(plant, date1, date2) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this3._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this3._currentUser.username + ':' + _this3._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date1\": date1,\n        \"date2\": date2\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return yield _this3.httpClient.get(plant.link + '/between', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  fetchPlantDatasToday(plant) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this4._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this4._currentUser.username + ':' + _this4._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en') // \"date\": '2022-04-18'\n\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return _this4.httpClient.get(plant.link + '/from', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  updatePlantByName(name, plant) {\n    const headers = new HttpHeaders(this._currentUser ? {\n      Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    } : {});\n    return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n  }\n\n}\n\nPlantService.ɵfac = function PlantService_Factory(t) {\n  return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPlantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlantService,\n  factory: PlantService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/plant.service.ts"],"names":["HttpHeaders","HttpParams","environment","formatDate","Energy","i0","i1","PlantService","constructor","httpClient","localStorage","getItem","_currentUser","JSON","parse","atob","_energies","Array","_plants","getPlants","next","forEach","p","push","i","length","fetchPlantDatasBetweenDates","ps","status","plant","s","thisYearEnergy","datePipe","transform","dateTime","current","voltage","powerFactor","thisYearTotalEnergy","Date","todayHours","todayCurrent","todayVoltage","todayPowerFactor","todayPower","todayEnergy","_dailyEnergy","_yearlyEnergy","console","log","get","apiPlantUrl","getSelectedPlant","_selectedPlant","setSelectedPlant","setItem","stringify","getEnergies","date1","date2","headers","Authorization","btoa","username","password","parameters","queryParams","fromObject","link","params","fetchPlantDatasToday","updatePlantByName","name","put","ɵfac","PlantService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlantService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        if (localStorage.getItem(\"currentUser\") != null) {\n            this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n        }\n        this._energies = new Array();\n        this._plants = this.getPlants();\n        async (next) => {\n            this._plants = next;\n            this._plants.forEach(p => {\n                this._energies.push(new Energy());\n                // console.log(p)\n            });\n            for (let i = 0; i < this._energies.length; i++) {\n                (await this.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01', '2022-12-31')).forEach(ps => {\n                    this._energies[i].status = ps;\n                    this._energies[i].plant = this._plants[i];\n                    ps.forEach(s => {\n                        this._energies[i].thisYearEnergy[this.datePipe.transform(s.dateTime, 'MM') - 1] += s.current * s.voltage * s.powerFactor;\n                        this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor;\n                        if (this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                            this._energies[i].todayHours.push(this.datePipe.transform(s.dateTime, 'HH:mm:ss'));\n                            this._energies[i].todayCurrent.push(s.current);\n                            this._energies[i].todayVoltage.push(s.voltage);\n                            this._energies[i].todayPowerFactor.push(s.powerFactor);\n                            this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor);\n                            this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor;\n                        }\n                    });\n                });\n                this._dailyEnergy.push(this._energies[i].todayEnergy);\n                this._yearlyEnergy.push(this._energies[i].thisYearTotalEnergy);\n            }\n            console.log(this._energies);\n        };\n    }\n    // getPlant(id) {\n    //   const headers = new HttpHeaders(this._currentUser ? {\n    //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    //   } : {});\n    //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n    // }\n    async getPlants() {\n        return this.httpClient.get(environment.apiPlantUrl, {});\n    }\n    getSelectedPlant() {\n        return this._selectedPlant;\n    }\n    setSelectedPlant(plant) {\n        localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n        this._selectedPlant = plant;\n    }\n    getEnergies() {\n        return this._energies;\n    }\n    async fetchPlantDatasBetweenDates(plant, date1, date2) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date1\": date1,\n            \"date2\": date2\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return await this.httpClient.get(plant.link + '/between', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    async fetchPlantDatasToday(plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en')\n            // \"date\": '2022-04-18'\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/from', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    updatePlantByName(name, plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n    }\n}\nPlantService.ɵfac = function PlantService_Factory(t) { return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient)); };\nPlantService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PlantService, factory: PlantService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}