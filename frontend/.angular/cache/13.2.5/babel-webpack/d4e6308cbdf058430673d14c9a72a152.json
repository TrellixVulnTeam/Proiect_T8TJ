{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nimport * as i2 from \"@angular/common\";\nexport class EnergyService {\n  constructor(plantService, datePipe) {\n    this.plantService = plantService;\n    this.datePipe = datePipe;\n    this._energies = new Array();\n    this._plants = new Array();\n  }\n\n  getEnergies() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this._plants = yield _this.plantService.getPlants();\n\n      for (let i = 0; i < _this._plants.length; i++) {\n        _this._energies.push(new Energy());\n\n        _this._energies[i].plant = _this._plants[i];\n        _this._energies[i].status = yield _this.plantService.fetchPlantDatasBetweenDates(_this._plants[i], '2022-01-01', '2022-12-31');\n\n        _this._energies[i].status.forEach(ps => {\n          var month = _this.datePipe.transform(ps.dateTime, 'MM') - 1;\n          _this._energies[i].thisYearEnergy[month] += ps.current * ps.voltage * ps.powerFactor;\n          _this._energies[i].thisYearTotalEnergy += ps.current * ps.voltage * ps.powerFactor;\n\n          if (_this.datePipe.transform(ps.dateTime, 'yyyy-MM-dd') == _this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n            _this._energies[i].todayCurrent.push(ps.current);\n\n            _this._energies[i].todayVoltage.push(ps.voltage);\n\n            _this._energies[i].todayPowerFactor.push(ps.powerFactor);\n\n            _this._energies[i].todayPower.push(ps.current * ps.voltage * ps.powerFactor);\n\n            _this._energies[i].todayHours.push(_this.datePipe.transform(ps.dateTime, 'HH:mm:ss'));\n\n            _this._energies[i].todayEnergy += ps.current * ps.voltage * ps.powerFactor;\n          }\n        });\n\n        if (_this._energies[i].todayHours.length > 0) {\n          var integralFactor = _this._energies[i].todayHours.length;\n          _this._energies[i].todayEnergy *= (integralFactor - 1) / integralFactor;\n        }\n\n        for (let j = 0; j < 12; j++) {}\n      }\n\n      console.log(_this._energies);\n      return _this._energies;\n    })();\n  }\n\n}\n\nEnergyService.ɵfac = function EnergyService_Factory(t) {\n  return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService), i0.ɵɵinject(i2.DatePipe));\n};\n\nEnergyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EnergyService,\n  factory: EnergyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/energy.service.ts"],"names":["Energy","i0","i1","i2","EnergyService","constructor","plantService","datePipe","_energies","Array","_plants","getEnergies","getPlants","i","length","push","plant","status","fetchPlantDatasBetweenDates","forEach","ps","month","transform","dateTime","thisYearEnergy","current","voltage","powerFactor","thisYearTotalEnergy","Date","todayCurrent","todayVoltage","todayPowerFactor","todayPower","todayHours","todayEnergy","integralFactor","j","console","log","ɵfac","EnergyService_Factory","t","ɵɵinject","PlantService","DatePipe","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plant.service\";\nimport * as i2 from \"@angular/common\";\nexport class EnergyService {\n    constructor(plantService, datePipe) {\n        this.plantService = plantService;\n        this.datePipe = datePipe;\n        this._energies = new Array();\n        this._plants = new Array();\n    }\n    async getEnergies() {\n        this._plants = await this.plantService.getPlants();\n        for (let i = 0; i < this._plants.length; i++) {\n            this._energies.push(new Energy());\n            this._energies[i].plant = this._plants[i];\n            this._energies[i].status = await this.plantService.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01', '2022-12-31');\n            this._energies[i].status.forEach(ps => {\n                var month = this.datePipe.transform(ps.dateTime, 'MM') - 1;\n                this._energies[i].thisYearEnergy[month] += ps.current * ps.voltage * ps.powerFactor;\n                this._energies[i].thisYearTotalEnergy += ps.current * ps.voltage * ps.powerFactor;\n                if (this.datePipe.transform(ps.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')) {\n                    this._energies[i].todayCurrent.push(ps.current);\n                    this._energies[i].todayVoltage.push(ps.voltage);\n                    this._energies[i].todayPowerFactor.push(ps.powerFactor);\n                    this._energies[i].todayPower.push(ps.current * ps.voltage * ps.powerFactor);\n                    this._energies[i].todayHours.push(this.datePipe.transform(ps.dateTime, 'HH:mm:ss'));\n                    this._energies[i].todayEnergy += ps.current * ps.voltage * ps.powerFactor;\n                }\n            });\n            if (this._energies[i].todayHours.length > 0) {\n                var integralFactor = this._energies[i].todayHours.length;\n                this._energies[i].todayEnergy *= (integralFactor - 1) / integralFactor;\n            }\n            for (let j = 0; j < 12; j++) {\n            }\n        }\n        console.log(this._energies);\n        return this._energies;\n    }\n}\nEnergyService.ɵfac = function EnergyService_Factory(t) { return new (t || EnergyService)(i0.ɵɵinject(i1.PlantService), i0.ɵɵinject(i2.DatePipe)); };\nEnergyService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EnergyService, factory: EnergyService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}