{"ast":null,"code":"import _asyncToGenerator from \"/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class PlantService {\n  constructor(httpClient, datePipe) {\n    this.httpClient = httpClient;\n    this.datePipe = datePipe;\n\n    if (localStorage.getItem(\"currentUser\") != null) {\n      this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n    }\n\n    this._energies = new Array();\n    this._plants = new Array();\n    this.initialize();\n  }\n\n  initialize() {\n    this.getPlants().forEach(next => {\n      this._plants = next;\n\n      this._plants.forEach(p => {\n        this._energies.push(new Energy());\n\n        console.log(p);\n      }); //  for(let i = 0; i < this._energies.length; i++){\n      //     (await this.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01','2022-12-31')).forEach(\n      //       ps => {\n      //        this._energies[i].status = ps\n      //        this._energies[i].plant = this._plants[i]\n      //        ps.forEach(\n      //          s => {\n      //            this._energies[i].thisYearEnergy[this.datePipe.transform(s.dateTime,'MM') as unknown as number - 1] += s.current * s.voltage * s.powerFactor\n      //            this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor\n      //            if(this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')){\n      //              this._energies[i].todayHours.push(this.datePipe.transform(s.dateTime,'HH:mm:ss'))\n      //              this._energies[i].todayCurrent.push(s.current)\n      //              this._energies[i].todayVoltage.push(s.voltage)\n      //              this._energies[i].todayPowerFactor.push(s.powerFactor)\n      //              this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor)\n      //              this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor\n      //            }\n      //          }\n      //        )\n      //       }\n      //    )\n      //  }\n      //  console.log(this._energies)\n\n    });\n  } // getPlant(id) {\n  //   const headers = new HttpHeaders(this._currentUser ? {\n  //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n  //   } : {});\n  //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n  // }\n\n\n  getPlants() {\n    return this.httpClient.get(environment.apiPlantUrl, {});\n  }\n\n  getSelectedPlant() {\n    return this._selectedPlant;\n  }\n\n  setSelectedPlant(plant) {\n    localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n    this._selectedPlant = plant;\n  }\n\n  getEnergies() {\n    return this._energies;\n  }\n\n  fetchPlantDatasBetweenDates(plant, date1, date2) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this._currentUser.username + ':' + _this._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date1\": date1,\n        \"date2\": date2\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return yield _this.httpClient.get(plant.link + '/between', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  fetchPlantDatasToday(plant) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders(_this2._currentUser ? {\n        Authorization: 'Basic ' + btoa(_this2._currentUser.username + ':' + _this2._currentUser.password)\n      } : {});\n      const parameters = {\n        \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en') // \"date\": '2022-04-18'\n\n      };\n      let queryParams = new HttpParams({\n        fromObject: parameters\n      });\n      return _this2.httpClient.get(plant.link + '/from', {\n        headers: headers,\n        params: queryParams\n      });\n    })();\n  }\n\n  updatePlantByName(name, plant) {\n    const headers = new HttpHeaders(this._currentUser ? {\n      Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    } : {});\n    return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n  }\n\n}\n\nPlantService.ɵfac = function PlantService_Factory(t) {\n  return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe));\n};\n\nPlantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlantService,\n  factory: PlantService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/constantin-bogdanbumbeneci/Desktop/Licenta/Diploma/Proiect/frontend/src/app/Service/plant.service.ts"],"names":["HttpHeaders","HttpParams","environment","formatDate","Energy","i0","i1","i2","PlantService","constructor","httpClient","datePipe","localStorage","getItem","_currentUser","JSON","parse","atob","_energies","Array","_plants","initialize","getPlants","forEach","next","p","push","console","log","get","apiPlantUrl","getSelectedPlant","_selectedPlant","setSelectedPlant","plant","setItem","stringify","getEnergies","fetchPlantDatasBetweenDates","date1","date2","headers","Authorization","btoa","username","password","parameters","queryParams","fromObject","link","params","fetchPlantDatasToday","Date","updatePlantByName","name","put","ɵfac","PlantService_Factory","t","ɵɵinject","HttpClient","DatePipe","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport { formatDate } from '@angular/common';\nimport { Energy } from '../Entity/energy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class PlantService {\n    constructor(httpClient, datePipe) {\n        this.httpClient = httpClient;\n        this.datePipe = datePipe;\n        if (localStorage.getItem(\"currentUser\") != null) {\n            this._currentUser = JSON.parse(atob(localStorage.getItem(\"currentUser\")));\n        }\n        this._energies = new Array();\n        this._plants = new Array();\n        this.initialize();\n    }\n    initialize() {\n        this.getPlants().forEach(next => {\n            this._plants = next;\n            this._plants.forEach(p => {\n                this._energies.push(new Energy());\n                console.log(p);\n            });\n            //  for(let i = 0; i < this._energies.length; i++){\n            //     (await this.fetchPlantDatasBetweenDates(this._plants[i], '2022-01-01','2022-12-31')).forEach(\n            //       ps => {\n            //        this._energies[i].status = ps\n            //        this._energies[i].plant = this._plants[i]\n            //        ps.forEach(\n            //          s => {\n            //            this._energies[i].thisYearEnergy[this.datePipe.transform(s.dateTime,'MM') as unknown as number - 1] += s.current * s.voltage * s.powerFactor\n            //            this._energies[i].thisYearTotalEnergy += s.current * s.voltage * s.powerFactor\n            //            if(this.datePipe.transform(s.dateTime, 'yyyy-MM-dd') == this.datePipe.transform(new Date(), 'yyyy-MM-dd')){\n            //              this._energies[i].todayHours.push(this.datePipe.transform(s.dateTime,'HH:mm:ss'))\n            //              this._energies[i].todayCurrent.push(s.current)\n            //              this._energies[i].todayVoltage.push(s.voltage)\n            //              this._energies[i].todayPowerFactor.push(s.powerFactor)\n            //              this._energies[i].todayPower.push(s.current * s.voltage * s.powerFactor)\n            //              this._energies[i].todayEnergy += s.current * s.voltage * s.powerFactor\n            //            }\n            //          }\n            //        )\n            //       }\n            //    )\n            //  }\n            //  console.log(this._energies)\n        });\n    }\n    // getPlant(id) {\n    //   const headers = new HttpHeaders(this._currentUser ? {\n    //     Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n    //   } : {});\n    //   return this.httpClient.get<Plant>(environment.apiPlantUrl + \"/\" + id, { headers: headers });\n    // }\n    getPlants() {\n        return this.httpClient.get(environment.apiPlantUrl, {});\n    }\n    getSelectedPlant() {\n        return this._selectedPlant;\n    }\n    setSelectedPlant(plant) {\n        localStorage.setItem(\"selectedPlant\", JSON.stringify(plant));\n        this._selectedPlant = plant;\n    }\n    getEnergies() {\n        return this._energies;\n    }\n    async fetchPlantDatasBetweenDates(plant, date1, date2) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date1\": date1,\n            \"date2\": date2\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return await this.httpClient.get(plant.link + '/between', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    async fetchPlantDatasToday(plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        const parameters = {\n            \"date\": formatDate(new Date(), 'yyyy-MM-dd', 'en')\n            // \"date\": '2022-04-18'\n        };\n        let queryParams = new HttpParams({ fromObject: parameters });\n        return this.httpClient.get(plant.link + '/from', {\n            headers: headers,\n            params: queryParams\n        });\n    }\n    updatePlantByName(name, plant) {\n        const headers = new HttpHeaders(this._currentUser ? {\n            Authorization: 'Basic ' + btoa(this._currentUser.username + ':' + this._currentUser.password)\n        } : {});\n        return this.httpClient.put(environment.apiPlantUrl + '/' + name, plant);\n    }\n}\nPlantService.ɵfac = function PlantService_Factory(t) { return new (t || PlantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe)); };\nPlantService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PlantService, factory: PlantService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}